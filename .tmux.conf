unbind C-b
set -g prefix C-g
bind C-g send-prefix

# border colours
set -g pane-border-style fg=magenta
set -g pane-active-border-style "bg=default fg=magenta"
set -g display-panes-time 2000

# STDを選択、コピーできるようにする
setw -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'C-v' send -X rectangle-toggle
bind-key -T copy-mode-vi 'y' send -X copy-selection
set -s escape-time 0

# tmuxを256色表示できるようにする
set -g terminal-overrides 'xterm:colors=256'
# set-option -g default-terminal "screen-256color"

# set-option -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color-italic"
set -ga terminal-overrides ",xterm-256color-italic:Tc"

# ステータスバーをトップに配置する
set-option -g status-position top

# 左右のステータスバーの長さを決定する
set-option -g status-left-length 120
set-option -g status-right-length 120

# Wi-Fi、バッテリー残量、現在時刻
# 最右に表示
set-option -g status-right '#[fg=#93a4c3 bg=colour235]#{pomodoro_status}#[bg=#93a4c3 fg=#1a212e] #{battery_percentage} #[bg=#93a4c3 fg=colour235]#[fg=#93a4c3 bg=colour235]#[bg=#93a4c3 fg=#1a212d] %H:%M '

set-option -g status-left '#[fg=colour255 bg=#c75ae8 bold]  #(cd #{pane_current_path}; git symbolic-ref HEAD | sed -e "s/refs\/heads\///") #[bg=colour235 fg=#c75ae8]'

# window-status のフォーマットを指定する。
set-window-option -g window-status-format "#[fg=colour240,bg=colour235]#[bg=colour240,fg=default] #W #[fg=colour240,bg=default]"

# カレントウィンドウの window-status のフォーマットを指定する
set-window-option -g window-status-current-format "#[bg=colour235,fg=#9a77cf,bold]#[fg=colour255,bg=#9a77cf,bold] #W #[fg=#9a77cf,bg=default,bold]"

# ステータスバーを1秒毎に描画し直す
set-option -g status-interval 1
set-option -g status on

# センタライズ（主にウィンドウ番号など）
set-option -g status-justify absolute-centre

# ステータスバーの色を設定する
set-option -g status-bg "colour235"

# status line の文字色を指定する。
set-option -g status-fg "colour255"

# 新規windowで同じディレクトリを開く
bind c new-window -c "#{pane_current_path}"

# | でペインを縦分割する
bind | split-window -h -c '#{pane_current_path}'

# - でペインを縦分割する
bind - split-window -v -c '#{pane_current_path}'

# 番号基準値を変更
set-option -g base-index 1

# マウス操作を有効にする
set-option -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# ペインをリサイズする
bind-key -n M-Up resize-pane -U 5
bind-key -n M-Down resize-pane -D 5
bind-key -n M-Left resize-pane -L 5
bind-key -n M-Right resize-pane -R 5

# set-option -g default-command "reattach-to-user-namespace -l $SHELL -l"
set-window-option -g mode-keys vi
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"

# autosave
set -g focus-events on

# Smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|n?vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l

# Options
set -g @pomodoro_start 'k'                          # Start a Pomodoro with tmux-prefix + p
set -g @pomodoro_cancel 'K'                         # Cancel a Pomodoro with tmux-prefix key + P

set -g @pomodoro_mins 25                            # The duration of the pomodoro
set -g @pomodoro_break_mins 5                       # The duration of the break after the pomodoro

set -g @pomodoro_on " #[fg=$text_red]🍅 "           # The formatted output when the pomodoro is running
set -g @pomodoro_complete " #[fg=$text_green]🍅 "   # The formatted output when the break is running

set -g @pomodoro_notifications 'on'                 # Turn on/off desktop notifications
set -g @pomodoro_sound 'Pop'                        # Sound for desktop notifications (Run `ls /System/Library/Sounds` for a list of sounds to use)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'xamut/tmux-spotify'
set-option -g @plugin 'b0o/tmux-autoreload'
set -g @plugin 'roosta/tmux-fuzzback'
set -g @plugin 'olimorris/tmux-pomodoro-plus'
set -g @plugin 'ChanderG/tmux-notify'
# set -g @plugin 'christoomey/vim-tmux-navigator'

run -b '~/.tmux/plugins/tpm/tpm'
